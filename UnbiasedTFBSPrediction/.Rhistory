shiny::runApp()
#Read in the table
EnhancerPromoterAssoications <- read_delim("../DataFiles/Enhancers Track/Human/hg19_enhancer_promoter_correlations_distances_cell_type.txt.gz",
"\t", escape_double = FALSE, trim_ws = TRUE)
assign("EnhancerPromoterAssoications", EnhancerPromoterAssoications, .GlobalEnv)
PromotersAssoicatedWithEnhancers<-separate(EnhancerPromoterAssoications, col=promoter, into= c("promoter", "strand"), sep= ',')%>%
separate(., col= promoter, into= c("chr", "start", "end"))%>%makeGRangesFromDataFrame(keep.extra.columns = TRUE)
## Convert Enhancer To Granges
EnhancerGrangeWithTargets <- EnhancerPromoterAssoications$enhancer%>%GRanges()
# Add everything to the metadata columns
mcols(EnhancerGrangeWithTargets) <- PromotersAssoicatedWithEnhancers
# Select for significant values only,
EnhancerGrangeWithTargetsSiginificant <- subset(EnhancerGrangeWithTargets, `FDR`<0.05)
# Generate a vector for targets of enhancers by overlapping promoter regions with promoter GRanges
IntersectBetweenOverlappingPromoterRanges <- findOverlaps(EnhancerGrangeWithTargetsSiginificant$X, promoterTracks)
# Subset for Grange for promoter tarcks by the hits from the findOverlaps vector above (this will also order it)
GenesRegulatedByEnhancers <- as.data.frame(mcols(promoterTracks))[IntersectBetweenOverlappingPromoterRanges%>%subjectHits(),]
# Subset the EnhancerGrange by the same vector (except the vector for this Grange) hence ordering them both in the same order
EnhancersWithGeneTargetsGrange <- EnhancerGrangeWithTargetsSiginificant[IntersectBetweenOverlappingPromoterRanges%>%queryHits()]
## Combine them
mcols(EnhancersWithGeneTargetsGrange) <- cbind.data.frame(mcols(EnhancersWithGeneTargetsGrange),GenesRegulatedByEnhancers)
## Removing the redudent data! (I had to use this due to dplyr not enjoying columns having the same name)
mcols(EnhancersWithGeneTargetsGrange) <- mcols(EnhancersWithGeneTargetsGrange)[12:20]
saveRDS(EnhancersWithGeneTargetsGrange, "../DataFiles/Interactions/Human/EnhancerPromoterInteractionDataFrame.rds")
#########Importing Bed File for the promoter regions with gene symbol names
promoterTracks <- geneGrange%>%
promoters(upstream = input$PromoterStart,
downstream = input$PromoterFinish )
###########################################################
#### Data Inputs
###########################################################
geneGrange <- readr::read_delim("../DataFiles/Gene Tracks/Human/hg19GeneLevelFile.txt", delim = "\t") %>%
makeGRangesFromDataFrame(
keep.extra.columns=TRUE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chrom",
start.field= "start",
end.field="end",
strand.field="strand")
#########Importing Bed File for the promoter regions with gene symbol names
promoterTracks <- geneGrange%>%
promoters(upstream = input$PromoterStart,
downstream = input$PromoterFinish )
promoterTracks <- geneGrange%>%
promoters()
PromotersAssoicatedWithEnhancers<-separate(EnhancerPromoterAssoications, col=promoter, into= c("promoter", "strand"), sep= ',')%>%
separate(., col= promoter, into= c("chr", "start", "end"))%>%makeGRangesFromDataFrame(keep.extra.columns = TRUE)
## Convert Enhancer To Granges
EnhancerGrangeWithTargets <- EnhancerPromoterAssoications$enhancer%>%GRanges()
# Add everything to the metadata columns
mcols(EnhancerGrangeWithTargets) <- PromotersAssoicatedWithEnhancers
# Select for significant values only,
EnhancerGrangeWithTargetsSiginificant <- subset(EnhancerGrangeWithTargets, `FDR`<0.05)
# Generate a vector for targets of enhancers by overlapping promoter regions with promoter GRanges
IntersectBetweenOverlappingPromoterRanges <- findOverlaps(EnhancerGrangeWithTargetsSiginificant$X, promoterTracks)
# Subset for Grange for promoter tarcks by the hits from the findOverlaps vector above (this will also order it)
GenesRegulatedByEnhancers <- as.data.frame(mcols(promoterTracks))[IntersectBetweenOverlappingPromoterRanges%>%subjectHits(),]
# Subset the EnhancerGrange by the same vector (except the vector for this Grange) hence ordering them both in the same order
EnhancersWithGeneTargetsGrange <- EnhancerGrangeWithTargetsSiginificant[IntersectBetweenOverlappingPromoterRanges%>%queryHits()]
## Combine them
mcols(EnhancersWithGeneTargetsGrange) <- cbind.data.frame(mcols(EnhancersWithGeneTargetsGrange),GenesRegulatedByEnhancers)
## Removing the redudent data! (I had to use this due to dplyr not enjoying columns having the same name)
mcols(EnhancersWithGeneTargetsGrange) <- mcols(EnhancersWithGeneTargetsGrange)[12:20]
EnhancersWithGeneTargetsGrange
EnhancersWithGeneTargetsGrange
mcols(EnhancersWithGeneTargetsGrange)[12:18]
mcols(EnhancersWithGeneTargetsGrange)[1:15]
mcols(EnhancersWithGeneTargetsGrange)[10:12]
mcols(EnhancersWithGeneTargetsGrange)[10:16]
mcols(EnhancersWithGeneTargetsGrange)[12:16]
## Removing the redudent data! (I had to use this due to dplyr not enjoying columns having the same name)
mcols(EnhancersWithGeneTargetsGrange) <- mcols(EnhancersWithGeneTargetsGrange)[12:16]
saveRDS(EnhancersWithGeneTargetsGrange, "../DataFiles/Interactions/Human/EnhancerPromoterInteractionDataFrame.rds")
EnhancersWithGeneTargetsGrange <- readRDS("../DataFiles/Interactions/Human/EnhancerPromoterInteractionDataFrame.rds")
EnhancersWithGeneTargetsGrange
EnhancersWithGeneTargetsGrange <- readRDS("../DataFiles/Interactions/Human/EnhancerPromoterInteractionDataFrame.rds")
runApp()
runApp()
runApp()
PredictedTFBS
runApp()
CustomPredictedSitesPath
# Example DataFile!!
CustomPredictedSitesPath <- "../ExampleFiles/ExampleCustomChIP-seqGATA4TFBS.bed"
CustomPredictedSitesPath
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
",", escape_double = FALSE,
col_names = T,
trim_ws = TRUE)%>%
dplyr::select(c("seqnames","start", "end"))%>% # Remove the irrelevant columns just for the sake of the cleaning up the final datatable
makeGRangesFromDataFrame(.,
keep.extra.columns=FALSE, # Keep extra columns for additional info but there wont be colnames
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field= "seqnames",
start.field="start",
end.field= "end",
starts.in.df.are.0based=FALSE)%>%
sort()
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
"\t", escape_double = FALSE,
col_names = T,
trim_ws = TRUE)%>%
dplyr::select(c("seqnames","start", "end"))%>% # Remove the irrelevant columns just for the sake of the cleaning up the final datatable
makeGRangesFromDataFrame(.,
keep.extra.columns=FALSE, # Keep extra columns for additional info but there wont be colnames
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field= "seqnames",
start.field="start",
end.field= "end",
starts.in.df.are.0based=FALSE)%>%
sort()
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
"\t", escape_double = FALSE,
col_names = T,
trim_ws = TRUE)
GenomicPositions
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
"\t", escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE)%>%
dplyr::select(c("seqnames","start", "end"))%>% # Remove the irrelevant columns just for the sake of the cleaning up the final datatable
makeGRangesFromDataFrame(.,
keep.extra.columns=FALSE, # Keep extra columns for additional info but there wont be colnames
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field= "seqnames",
start.field="start",
end.field= "end",
starts.in.df.are.0based=FALSE)%>%
sort()
GenomicPositions
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
"\t", escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE
)
GenomicPositions
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
"\t", escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE)%>%
dplyr::select(c("seqnames","start", "end"))%>% # Remove the irrelevant columns just for the sake of the cleaning up the final datatable
makeGRangesFromDataFrame(.,
keep.extra.columns=FALSE, # Keep extra columns for additional info but there wont be colnames
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field= "X1",
start.field="X2",
end.field= "X3",
starts.in.df.are.0based=FALSE)%>%
sort()
seqlevelsStyle(GenomicPositions) <- "UCSC"
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
"\t", escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE)%>%
keep.extra.columns=FALSE, # Keep extra columns for additional info but there wont be colnames
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field= "X1",
start.field="X2",
end.field= "X3",
starts.in.df.are.0based=FALSE)%>%
sort()
GenomicPositions <- readr::read_delim(file = CustomPredictedSitesPath,
"\t", escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE)%>%
makeGRangesFromDataFrame(.,
keep.extra.columns=FALSE, # Keep extra columns for additional info but there wont be colnames
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field= "X1",
start.field="X2",
end.field= "X3",
starts.in.df.are.0based=FALSE)%>%
sort()
seqlevelsStyle(GenomicPositions) <- "UCSC"
# Assigning to motif positions
assign("genomicLocationOfMotifs", GenomicPositions, .GlobalEnv)
runApp()
runApp()
CustomPredictedSitesPath
GenomicPositions
ActiveChromatinRegions
UnbiasedPredictedMotifs
UnbiasedPredictedMotifs
OverlappingRangeOfMOtifsInPromoters
UnbiasedMotifsPredicted
UnbiasedMotifsPredicted
UnbiasedPredictedMotifs
UnbiasedMotifsPredicted
#Overlap the promoter regions of genes with unbiased motifs returning promoters with a predicted TFBS
OverlappingRangeOfMOtifsInPromoters <- findOverlaps(promoterTracks, UnbiasedPredictedMotifs$Promoters)
OverlappingRangeOfMOtifsInPromoters
unbiasedPromoterMotifs <- UnbiasedPredictedMotifs$Promoters[OverlappingRangeOfMOtifsInPromoters%>%subjectHits()]
mcols(unbiasedPromoterMotifs) <- cbind.data.frame(mcols(unbiasedPromoterMotifs),
"Genes Regulated" = promoterTracks[OverlappingRangeOfMOtifsInPromoters%>%queryHits()]$gene)
## Enhancers with motifs
#Get Overlapping ranges
OverlappingRangeEnhancersMotifs <- findOverlaps(EnhancersWithGeneTargetsGrange, UnbiasedPredictedMotifs$Enhancers)
#Get gene targets vector in the order of Ovrelapping Ranges above
EnhancerTargets <- EnhancersWithGeneTargetsGrange$hg19.kgXref.geneSymbol[OverlappingRangeEnhancersMotifs%>%queryHits()]
#Get the enhancer motifs into the same order
MotifsInEnhancers <- UnbiasedPredictedMotifs$Enhancers[OverlappingRangeEnhancersMotifs%>%subjectHits()]
#Paste the genes regulated into the metadata column of the enhancers
mcols(MotifsInEnhancers) <- cbind.data.frame(mcols(MotifsInEnhancers),
"Genes Regulated" = EnhancerTargets)
EnhancerMotifsNotTargeted <- UnbiasedPredictedMotifs$`Permissive Enhancers`[!UnbiasedPredictedMotifs$`Permissive Enhancers`
%in% MotifsInEnhancers ]
#Paste NA for these enhancers.
mcols(EnhancerMotifsNotTargeted) <- cbind.data.frame(mcols(EnhancerMotifsNotTargeted),
"Genes Regulated" = "NA")
UnbiasedPredictedMotifs
MotifsInEnhancers
UnbiasedPredictedMotifs
EnhancerMotifsNotTargeted
#Paste NA for these enhancers.
mcols(EnhancerMotifsNotTargeted) <- cbind.data.frame(mcols(EnhancerMotifsNotTargeted),
"Genes Regulated" = "NA")
#Combine everything into a singe list!
UnbiasedMotifsPredicted <- GenomicRangesList("Promoters With Gene Targets" = unbiasedPromoterMotifs,
"Enhancers With Gene Targets" = GRangesList(MotifsInEnhancers,
EnhancerMotifsNotTargeted)%>%
unlist())
unbiasedPromoterMotifs
MotifsInEnhancers
MotifsInEnhancers
#Paste the genes regulated into the metadata column of the enhancers
mcols(MotifsInEnhancers) <- cbind.data.frame(mcols(MotifsInEnhancers),
"Genes Regulated" = EnhancerTargets)
EnhancerTargets
#Get gene targets vector in the order of Ovrelapping Ranges above
EnhancerTargets <- EnhancersWithGeneTargetsGrange$hg19.kgXref.geneSymbol[OverlappingRangeEnhancersMotifs%>%queryHits()]
EnhancerTargets
EnhancersWithGeneTargetsGrange
EnhancersWithGeneTargetsGrange
#Get gene targets vector in the order of Ovrelapping Ranges above
EnhancerTargets <- EnhancersWithGeneTargetsGrange$GenesRegulatedByEnhancers[OverlappingRangeEnhancersMotifs%>%queryHits()]
#Get the enhancer motifs into the same order
MotifsInEnhancers <- UnbiasedPredictedMotifs$Enhancers[OverlappingRangeEnhancersMotifs%>%subjectHits()]
EnhancerMotifsNotTargeted <- UnbiasedPredictedMotifs$`Permissive Enhancers`[!UnbiasedPredictedMotifs$`Permissive Enhancers`
%in% MotifsInEnhancers ]
#Paste the genes regulated into the metadata column of the enhancers
mcols(MotifsInEnhancers) <- cbind.data.frame(mcols(MotifsInEnhancers),
"Genes Regulated" = EnhancerTargets)
#Paste NA for these enhancers.
mcols(EnhancerMotifsNotTargeted) <- cbind.data.frame(mcols(EnhancerMotifsNotTargeted),
"Genes Regulated" = "NA")
#Combine everything into a singe list!
UnbiasedMotifsPredicted <- GenomicRangesList("Promoters With Gene Targets" = unbiasedPromoterMotifs,
"Enhancers With Gene Targets" = GRangesList(MotifsInEnhancers,
EnhancerMotifsNotTargeted)%>%
unlist())
assign("UnbiasedMotifsPredicted", UnbiasedMotifsPredicted, .GlobalEnv)
if(input$DifferentialExpressedGenes == TRUE){
differenitallyExpressedGenesList <- read_delim(input$differenitallyExpressedGenesList$datapath,
col_names = input$headerDE,
delim = input$sepDE,
quote = input$quoteDE,
skip = input$skipDE)
assign("differenitallyExpressedGenesList", differenitallyExpressedGenesList, .GlobalEnv)
## Genes who showed differenital expression with an enhancer that was correlated with its expression
enhancerTargetsOfTF <- subset(UnbiasedMotifsPredicted$`Enhancers With Gene Targets`,
`Genes Regulated` %in% differenitallyExpressedGenesList[[input$customDEGeneColumn]])
##Genes who showed differenital expression with promoter targets
promoterTargetsOfTF <- subset(UnbiasedMotifsPredicted$`Promoters With Gene Targets`,
`Genes Regulated` %in% differenitallyExpressedGenesList[[input$customDEGeneColumn]])
##Predicted Sites in the Regulatory Elements of these genes
returnObjectDifferentialSites <- GRangesList("Promoter Predicted Sites" = promoterTargetsOfTF,
"Enhancer Predicted Sites" = enhancerTargetsOfTF)%>%unlist()
names(returnObjectDifferentialSites) <- NULL
assign("PredictedTFBS", returnObjectDifferentialSites, .GlobalEnv)
}
returnObjectDifferentialSites
UnbiasedMotifsPredicted
runApp()
GeneOntologyResultsSorted
runApp()
?downloadHandler
tiff(filename = paste0(file, ".tiff"),
width = 3400, height = 1600,
units = "px", pointsize = 12,
compression = c("none"),
bg = "white", res = 150)
fill <- "file"
tiff(filename = paste0(file, ".tiff"),
width = 3400, height = 1600,
units = "px", pointsize = 12,
compression = c("none"),
bg = "white", res = 150)
tiff(filename = paste0(file, ".tiff"),
width = 3400, height = 1600,
units = "px", pointsize = 12,
compression = c("none"),
bg = "white", res = 150)
paste0(file, ".tiff")
file
file <- "file"
tiff(filename = paste0(file, ".tiff"),
width = 3400, height = 1600,
units = "px", pointsize = 12,
compression = c("none"),
bg = "white", res = 150)
#Gviz plot code
plotTracks(trackList =c(humanIdeogramTrack,
gHumanTrack,
IntearctionTrack,
EnhancersHumanChromosomeSpecific,
promotertrackChromosomeSpecific,
PredictedTFBSTrack,
RawMotifInstancesTrack,
geneTrackChromosomeSpecific,
chromatinStatesTrack),
sizes= c(1,1.5,3,1,1,1,1,3,3),
from =input$fromM,
to= input$toM,
chromosome= input$chrM,
cex.title = 1,
rotation.title = 0,
showAxis = FALSE,
background.title = "white",
lwd.title = 1.1,
title.width = 3,
cex.main = 5,
col = NULL,
fontcolor.title = "black",
legend=TRUE)
# export Gviz "Screen shot" that can be downloaded
output$SaveHighResGVIZImage <- downloadHandler('GenomeBrowserImage',
content = function(file) {
tiff(filename = paste0(file, ".tiff"),
width = 3400, height = 1600,
units = "px", pointsize = 12,
compression = c("none"),
bg = "white", res = 150)
#Gviz plot code
plotTracks(trackList =c(humanIdeogramTrack,
gHumanTrack,
IntearctionTrack,
EnhancersHumanChromosomeSpecific,
promotertrackChromosomeSpecific,
PredictedTFBSTrack,
RawMotifInstancesTrack,
geneTrackChromosomeSpecific,
chromatinStatesTrack),
sizes= c(1,1.5,3,1,1,1,1,3,3),
from =input$fromM,
to= input$toM,
chromosome= input$chrM,
cex.title = 1,
rotation.title = 0,
showAxis = FALSE,
background.title = "white",
lwd.title = 1.1,
title.width = 3,
cex.main = 5,
col = NULL,
fontcolor.title = "black",
legend=TRUE)
})
runApp()
tiff(filename = paste0(file, ".tiff"),
width = 3400, height = 1600,
units = "px", pointsize = 12,
compression = c("none"),
bg = "white", res = 150)
#Gviz plot code
plotTracks(trackList =c(humanIdeogramTrack,
gHumanTrack,
IntearctionTrack,
EnhancersHumanChromosomeSpecific,
promotertrackChromosomeSpecific,
PredictedTFBSTrack,
RawMotifInstancesTrack,
geneTrackChromosomeSpecific,
chromatinStatesTrack),
sizes= c(1,1.5,3,1,1,1,1,3,3),
from =input$fromM,
to= input$toM,
chromosome= input$chrM,
cex.title = 1,
rotation.title = 0,
showAxis = FALSE,
background.title = "white",
lwd.title = 1.1,
title.width = 3,
cex.main = 5,
col = NULL,
fontcolor.title = "black",
legend=TRUE)
dev.off()
paste0(file, ".tiff")
paste0(getwd(), "GenomeBrowserImage")
paste0(getwd(), "/", "GenomeBrowserImage")
paste0(getwd(), "/", paste0(file, ".tiff"))
runApp()
?tiff
runApp()
runApp()
runApp()
